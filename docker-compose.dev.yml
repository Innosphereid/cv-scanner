version: '3.8'

services:
  # Development Application Service
  app:
    build:
      context: .
      dockerfile: docker/dev/Dockerfile
    container_name: cv-scanner-app-dev
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-cv_scanner_dev_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_SCHEMA=${DB_SCHEMA:-public}
      - DB_SSL=${DB_SSL:-false}
      - DB_REJECT_UNAUTHORIZED=${DB_REJECT_UNAUTHORIZED:-true}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-10}
      - DB_IDLE_TIMEOUT=${DB_IDLE_TIMEOUT:-10000}
      - DB_CONN_TIMEOUT=${DB_CONN_TIMEOUT:-10000}
      - DB_LOGGING=${DB_LOGGING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-true}
      - CLOUDINARY_CLOUD_NAME_FILE=/run/secrets/cloudinary_cloud_name
      - CLOUDINARY_API_KEY_FILE=/run/secrets/cloudinary_api_key
      - CLOUDINARY_API_SECRET_FILE=/run/secrets/cloudinary_api_secret
      - CLOUDINARY_SECURE=${CLOUDINARY_SECURE:-true}
      - CLOUDINARY_RETRY_ATTEMPTS=${CLOUDINARY_RETRY_ATTEMPTS:-2}
      - CLOUDINARY_RETRY_DELAY_MS=${CLOUDINARY_RETRY_DELAY_MS:-500}
      - CLOUDINARY_FAIL_FAST=${CLOUDINARY_FAIL_FAST:-true}
    secrets:
      - db_password
      - cloudinary_cloud_name
      - cloudinary_api_key
      - cloudinary_api_secret
    volumes:
      - ./src:/app/src
      - ./test:/app/test
      - ./tsconfig.json:/app/tsconfig.json
      - ./nest-cli.json:/app/nest-cli.json
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cv-scanner-dev-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cv-scanner-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-cv_scanner_dev_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    secrets:
      - db_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - '${DB_PORT:-5433}:5432'
    networks:
      - cv-scanner-dev-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-cv_scanner_dev_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# Docker Secrets (same as production)
secrets:
  db_password:
    file: ./secrets/db_password.txt
  cloudinary_cloud_name:
    file: ./secrets/cloudinary_cloud_name.txt
  cloudinary_api_key:
    file: ./secrets/cloudinary_api_key.txt
  cloudinary_api_secret:
    file: ./secrets/cloudinary_api_secret.txt

# Docker Volumes
volumes:
  postgres_dev_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

# Docker Networks
networks:
  cv-scanner-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
