version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: cv-scanner-app
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-cv_scanner_db}
      - DB_SCHEMA=${DB_SCHEMA:-public}
      - DB_SSL=${DB_SSL:-false}
      - DB_REJECT_UNAUTHORIZED=${DB_REJECT_UNAUTHORIZED:-true}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-10}
      - DB_IDLE_TIMEOUT=${DB_IDLE_TIMEOUT:-10000}
      - DB_CONN_TIMEOUT=${DB_CONN_TIMEOUT:-10000}
      - DB_LOGGING=${DB_LOGGING:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-true}
    secrets:
      - db_password
      - cloudinary_cloud_name
      - cloudinary_api_key
      - cloudinary_api_secret
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cv-scanner-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cv-scanner-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-cv_scanner_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - '${DB_PORT:-5432}:5432'
    networks:
      - cv-scanner-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-cv_scanner_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Log Aggregation with ELK Stack (Elasticsearch + Logstash + Kibana)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cv-scanner-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    networks:
      - cv-scanner-network
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cv-scanner-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - '5601:5601'
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - cv-scanner-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:5601/api/status || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregator
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: cv-scanner-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/app/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - cv-scanner-network

# Docker Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  cloudinary_cloud_name:
    file: ./secrets/cloudinary_cloud_name.txt
  cloudinary_api_key:
    file: ./secrets/cloudinary_api_key.txt
  cloudinary_api_secret:
    file: ./secrets/cloudinary_api_secret.txt

# Docker Volumes
volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  elasticsearch_data:
    driver: local

# Docker Networks
networks:
  cv-scanner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
